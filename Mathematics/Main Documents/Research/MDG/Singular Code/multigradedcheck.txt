LIB "multigrading.lib";


ring R=2,(x,y,z,r,s,t,e1,e2,e3,e12,e13),dp;
intmat M[6][11] = 
1,0,0,0,0,0,0,2,0,2,0,
0,1,0,0,0,0,0,0,0,0,0,
0,0,1,0,0,0,0,0,0,0,0,
0,0,0,1,0,0,0,0,1,0,1,
0,0,0,0,1,0,0,0,1,0,1,
0,0,0,0,0,1,2,0,1,0,2;
intmat L[6][6];

setBaseMultigrading(M, L);



e14,e15,e16,e23,e24,e25,e26,e34,e35,e36,e45,e46,e56,
e123,e124,e125,e126,e134,e135,e136,e145,e146,e234,e235,e236,e245,e246,e345,e346,e356,e456,
e1234,e1235,e1236,e1245,e1246,e1345,e1346,e2345,e2346,e3456,
e12345,e12346),Wp(v);

// missing e256, e156, e1256, ...

matrix C[51][51];
int i; int j; for (i=1; i<=51; i++) { for (j=1; j<=51; j++) { C[i,j]=(-1)^(v[i]*v[j]);}}
matrix D[51][51];
ncalgebra(C,D);

// initiate ideal b and adjoin squares

ideal b;
list odd = (e1,e2,e3,e4,e5,e6,
e123,e124,e125,e126,e134,e135,e136,e145,e146,e234,e235,e236,e245,e246,e345,e346,e356,e456,
e12345,e12346); 
for (i=1; i<=26; i++) {b = b + odd[i]*odd[i] ;}

// vertex * vertex

poly f(1)(2) = e1*e2-e12; 
poly f(1)(3) = e1*e3-t*e13;
poly f(1)(4) = e1*e4-e14; 
poly f(1)(5) = e1*e5-e15;
poly f(1)(6) = e1*e6-e16; 
poly f(2)(3) = e2*e3-e23; 
poly f(2)(4) = e2*e4-x*e24;
poly f(2)(5) = e2*e5-e25; 
poly f(2)(6) = e2*e6-e26;
poly f(3)(4) = e3*e4-e34;
poly f(3)(5) = e3*e5-s*e35;
poly f(3)(6) = e3*e6-r*e36;
poly f(4)(5) = e4*e5-z*e45;
poly f(4)(6) = e4*e6-y*e46;
poly f(5)(6) = e5*e6-e56;

b = b + f(1)(2),f(1)(3),f(1)(4),f(1)(5),f(1)(6),f(2)(3),f(2)(4),f(2)(5),f(2)(6),f(3)(4),f(3)(5),f(3)(6),f(4)(5),f(4)(6),f(5)(6);

// vertex * edge

poly f(1)(23) = e1*e23-t*e123;
poly f(1)(24) = e1*e24-e124; 
poly f(1)(25) = e1*e25-e125;
poly f(1)(26) = e1*e26-e126;
poly f(1)(34) = e1*e34-t*e134;
poly f(1)(35) = e1*e35-t*e135;
poly f(1)(36) = e1*e36-t*e136;
poly f(1)(45) = e1*e45-e145; 
poly f(1)(46) = e1*e46-e146;
poly f(1)(56) = e1*e56-t*e356+(y2r)*e135-(z2s)*e136;

b = b + f(1)(23),f(1)(24),f(1)(25),f(1)(26),f(1)(34),f(1)(35),f(1)(36),f(1)(45),f(1)(46),f(1)(56);

option(redSB);
option(redTail);
twostd(b);

// Singular already tells me that e6*e15+(y^2*r)*e135+(-z^2*s)*e136+(-t)*e356 = 0.

poly f(2)(34) = e2*e34-x*e234;
poly f(2)(35) = e2*e35-e235; 
poly f(2)(36) = e2*e36-e236;
poly f(2)(45) = e2*e45-x*e245;
poly f(2)(46) = e2*e46-x*e246;
poly f(2)(56) = e2*e56-x*e456+(yr2)*e245-(zs2)*e246;
poly f(3)(45) = e3*e45-s*e345;
poly f(3)(46) = e3*e46-r*e346;
poly f(3)(56) = e3*e56-(rs)*e356;
poly f(4)(56) = e4*e56-(xy)*e356;

b = b + f(2)(34),f(2)(35),f(2)(36),f(2)(45),f(2)(46),f(2)(56),f(3)(45),f(3)(46),f(3)(56),f(4)(56);


// vertex * face

poly f(1)(356) = e1*e356;
poly f(1)(256) = e1*e256-e1256-t*e2356+(x2)*e1356-(y2r)*e1235+(z2s)*e1236



// e1*e256 = e1256 - d(e12356)

twostd(b);


===============================================================================





LIB "ncalg.lib";

intvec v= 1:6, 2:15, 3:18, 4:10, 5:2;
ring A=(0,x,y,z,r,s,t),
(e1,e2,e3,e4,e5,e6,
e12,e13,e14,e15,e16,e23,e24,e25,e26,e34,e35,e36,e45,e46,e56,
e123,e124,e125,e126,e134,e135,e136,e145,e146,e234,e235,e236,e245,e246,e345,e346,e356,e456,
e1234,e1235,e1236,e1245,e1246,e1345,e1346,e2345,e2346,e3456,
e12345,e12346),Wp(v);

// missing e256, e156, e1256, ...

matrix C[51][51];
int i; int j; for (i=1; i<=51; i++) { for (j=1; j<=51; j++) { C[i,j]=(-1)^(v[i]*v[j]);}}
matrix D[51][51];
ncalgebra(C,D);

// vertex * vertex

poly f(1)(2) = e1*e2-e12; 
poly f(1)(3) = e1*e3-t*e13;
poly f(1)(4) = e1*e4-e14; 
poly f(1)(5) = e1*e5-e15;
poly f(1)(6) = e1*e6-e16; 
poly f(2)(3) = e2*e3-e23; 
poly f(2)(4) = e2*e4-x*e24;
poly f(2)(5) = e2*e5-e25; 
poly f(2)(6) = e2*e6-e26;
poly f(3)(4) = e3*e4-e34;
poly f(3)(5) = e3*e5-s*e35;
poly f(3)(6) = e3*e6-r*e36;
poly f(4)(5) = e4*e5-z*e45;
poly f(4)(6) = e4*e6-y*e46;
poly f(5)(6) = e5*e6-e56;

// vertex * edge

poly f(1)(23) = e1*e23-t*e123;
poly f(1)(24) = e1*e24-e124; 
poly f(1)(25) = e1*e25-e125;
poly f(1)(26) = e1*e26-e126;
poly f(1)(34) = e1*e34-t*e134;
poly f(1)(35) = e1*e35-t*e135;
poly f(1)(36) = e1*e36-t*e136;
poly f(1)(45) = e1*e45-e145; 
poly f(1)(46) = e1*e46-e146;
poly f(1)(56) = e1*e56-t*e356+(y2r)*e135-(z2s)*e136;
poly f(2)(34) = e2*e34-x*e234;
poly f(2)(35) = e2*e35-e235; 
poly f(2)(36) = e2*e36-e236;
poly f(2)(45) = e2*e45-x*e245;
poly f(2)(46) = e2*e46-x*e246;
poly f(2)(56) = e2*e56-x*e456+(yr2)*e245-(zs2)*e246;
poly f(3)(45) = e3*e45-s*e345;
poly f(3)(46) = e3*e46-r*e346;
poly f(3)(56) = e3*e56-(rs)*e356;
poly f(4)(56) = e4*e56-(yz)*e456;


ideal b;
list odd = (e1,e2,e3,e4,e5,e6,
e123,e124,e125,e126,e134,e135,e136,e145,e146,e234,e235,e236,e245,e246,e345,e346,e356,e456,
e12345,e12346); 
for (i=1; i<=26; i++) {b = b + odd[i]*odd[i] ;}
b = b + f(1)(2),f(1)(3),f(1)(4),f(1)(5),f(1)(6),f(2)(3),f(2)(4),f(2)(5),f(2)(6),f(3)(4),f(3)(5),f(3)(6),f(4)(5),f(4)(6),f(5)(6),
f(1)(23),f(1)(24),f(1)(25),f(1)(26),f(1)(34),f(1)(35),f(1)(36),f(1)(45),f(1)(46),f(1)(56),
f(2)(34),f(2)(35),f(2)(36),f(2)(45),f(2)(46),f(2)(56),f(3)(45),f(3)(46),f(3)(56),f(4)(56);


option(redSB);
option(redTail);
b=twostd(b);
b;




// vertex * face

poly f(1)(234) = e1*e234-t*e1234;
poly f(1)(235) = e1*e235-t*e1235;
poly f(1)(236) = e1*e236-t*e1236;
poly f(1)(246) = e1*e246-e1246;
poly f(1)(346) = e1*e346-t*e1346;
poly f(2)(345) = e2*e345-x*e2345;
poly f(2)(346) = e2*e346-x*e2346;
poly f(3)(456) = e3*e456-(rs)*e3456;

// vertex * 3-cell

poly f(1)(2345) = e1*e2345-t*e12345;
poly f(1)(2346) = e1*e2346-t*e12346;

// initiate ideal b and adjoin squares

ideal b;
list odd = (e1,e2,e3,e4,e5,e6,
e123,e124,e125,e126,e134,e135,e136,e145,e146,e234,e235,e236,e245,e246,e345,e346,e356,e456,
e12345,e12346); 
for (i=1; i<=26; i++) {b = b + odd[i]*odd[i] ;}

b = b + f(1)(2),f(1)(3),f(1)(4),f(1)(5),f(1)(6),f(2)(3),f(2)(4),f(2)(5),f(2)(6),f(3)(4),f(3)(5),f(3)(6),f(4)(5),f(4)(6),f(5)(6),
f(1)(23),f(1)(24),f(1)(25),f(1)(26),f(1)(34),f(1)(35),f(1)(36),f(1)(45),f(1)(46),f(1)(56),
f(2)(34),f(2)(35),f(2)(36),f(2)(45),f(2)(46),f(2)(56),f(3)(45),f(3)(46),f(3)(56),f(4)(56),
f(1)(234),f(1)(235),f(1)(236),f(1)(246),f(1)(346),f(2)(345),f(2)(346),f(3)(456),
f(1)(2345),f(1)(2346);


option(redSB);
option(redTail);
b=twostd(b);
b;


\\ =(y*r)*e12345+(-z*s)*e12346

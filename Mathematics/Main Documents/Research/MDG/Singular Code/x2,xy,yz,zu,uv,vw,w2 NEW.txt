option(prot);
int t=timer;
system("--ticks-per-sec", 100);


intvec v = 1:7, 2:16, 3:17, 4:8, 5:1; 


int N = 49; int i; int j; int k;

ring A=(2,x1,x2,x3,x4,x5,x6),(e1,e2,e3,e4,e5,e6,e7,
e12,e14,e15,e16,e17,e23,e25,e26,e27,e34,e36,e37,e45,e47,e56,e67,
e1234,e125,e126,e127,e145,e147,e156,e167,e2345,e236,e237,e256,e267,e3456,e347,e367,e4567,
e12345,e12347,e1256,e1267,e14567,e23456,e2367,e34567,
e1234567),dp;

list T = (e1,e2,e3,e4,e5,e6,e7,
e12,e14,e15,e16,e17,e23,e25,e26,e27,e34,e36,e37,e45,e47,e56,e67,
e1234,e125,e126,e127,e145,e147,e156,e167,e2345,e236,e237,e256,e267,e3456,e347,e367,e4567,
e12345,e12347,e1256,e1267,e14567,e23456,e2367,e34567,
e1234567); 


for (i=1; i<=N; i++) {poly E(i) = T[i];};

for (i=1; i<=N; i++) {for (j=i; j<=N; j++) {poly F(i)(j);};};

F(1)(2) = e1*e2 + x1*e12;
F(1)(3) = e1*e3 + x3*e12 + x1*e23;
F(1)(4) = e1*e4 + e14;
F(1)(5) = e1*e5 + e15;
F(1)(6) = e1*e6 + e16;
F(1)(7) = e1*e7 + e17;
F(2)(3) = e2*e3 + x2*e23;
F(2)(4) = e2*e4 + x4*e23 + x1*e34;
F(2)(5) = e2*e5 + e25;
F(2)(6) = e2*e6 + e26;
F(2)(7) = e2*e7 + e27; 
F(3)(4) = e3*e4 + x3*e34;  
F(3)(5) = e3*e5 + x5*e34 + x2*e45;  
F(3)(6) = e3*e6 + e36;
F(3)(7) = e3*e7 + e37;
F(4)(5) = e4*e5 + x4*e45;  
F(4)(6) = e4*e6 + x6*e45 + x3*e56;
F(4)(7) = e4*e7 + e47;
F(5)(6) = e5*e6 + x5*e56;
F(5)(7) = e5*e7 + x6*e56 + x4*e67;
F(6)(7) = e6*e7 + x6*e67;

  
F(1)(14) = e1*e25 + x1*e125;
F(1)(15) = e1*e26 + x1*e126;
F(1)(16) = e1*e27 + x1*e127;
F(1)(17) = e1*e34 + e1234;
F(1)(18) = e1*e36 + x3*e126 + x1*e236;
F(1)(19) = e1*e37 + x3*e127 + x1*e237;
F(1)(20) = e1*e45 + e145;
F(1)(21) = e1*e47 + e147;
F(1)(22) = e1*e56 + e156;
F(1)(23) = e1*e67 + e167;
F(2)(9) = e2*e14 + x1*e1234;
F(2)(10) = e2*e15 + x1*e125;
F(2)(11) = e2*e16 + x1*e126;
F(2)(12) = e2*e17 + x1*e127;
F(2)(18) = e2*e36 + x2*e236;
F(2)(19) = e2*e37 + x2*e237;
F(2)(20) = e2*e45 + e2345;
F(2)(21) = e2*e47 + x4*e237 + x1*e347;
F(2)(22) = e2*e56 + e256;
F(2)(23) = e2*e67 + e267;
F(3)(9) = e3*e14 + x3*e1234;
F(3)(10) = e3*e15 + x3*e125 + x1*e2345;
F(3)(11) = e3*e16 + x3*e126 + x1*e236;
F(3)(12) = e3*e17 + x3*e127 + x1*e237;
F(3)(14) = e3*e25 + x2*e2345;
F(3)(15) = e3*e26 + x2*e236;
F(3)(16) = e3*e27 + x2*e237;
F(3)(21) = e3*e47 + x3*e347;
F(3)(22) = e3*e56 + e3456;
F(3)(23) = e3*e67 + e367;
F(4)(8) = e4*e12 + e1234;
F(4)(10) = e4*e15 + x4*e145;
F(4)(11) = e4*e16 + x6*e145 + x3*e156;
F(4)(12) = e4*e17 + e147;
F(4)(14) = e4*e25 + x4*e2345;
F(4)(15) = e4*e26 + x6*e2345 + x3*e256;
F(4)(16) = e4*e27 + x1*e347 + x4*e237;
F(4)(18) = e4*e36 + x3*e3456;
F(4)(19) = e4*e37 + x3*e347;
F(4)(23) = e4*e67 + e4567;
F(5)(8) = e5*e12 + e125; 
F(5)(9) = e5*e14 + x4*e145;
F(5)(11) = e5*e16 + x5*e156;
F(5)(12) = e5*e17 + x6*e156 + x4*e167;
F(5)(13) = e5*e23 + e2345;
F(5)(15) = e5*e26 + x5*e256;
F(5)(16) = e5*e27 + x4*e267 + x6*e256;
F(5)(18) = e5*e36 + x5*e3456;
F(5)(19) = e5*e37 + x6*e3456 + x4*e367;
F(5)(21) = e5*e47 + x4*e4567;
F(6)(8) = e6*e12 + e126;
F(6)(9) = e6*e14 + x3*e156 + x6*e145;
F(6)(10) = e6*e15 + x5*e156;
F(6)(12) = e6*e17 + x6*e167;
F(6)(13) = e6*e23 + e236;
F(6)(14) = e6*e25 + x5*e256;
F(6)(16) = e6*e27 + x6*e267;
F(6)(17) = e6*e34 + e3456;
F(6)(19) = e6*e37 + x6*e367;
F(6)(21) = e6*e47 + x6*e4567;
F(7)(8) = e7*e12 + e127;
F(7)(9) = e7*e14 + e147;
F(7)(10) = e7*e15 + x6*e156 + x4*e167;
F(7)(11) = e7*e16 + x6*e167;
F(7)(13) = e7*e23 + e237;
F(7)(14) = e7*e25 + x6*e256 + x4*e267;
F(7)(15) = e7*e26 + x6*e267;
F(7)(17) = e7*e34 + e347;
F(7)(18) = e7*e36 + x6*e367;
F(7)(20) = e7*e45 + e4567;


F(1)(32) = e1*e2345 + x1*e12345;
F(1)(35) = e1*e256 + x1*e1256;
F(1)(36) = e1*e267 + x1*e1267;
F(1)(37) = e1*e3456 + x1*e23456 + x6*e12345 + x3*e1256;
F(1)(38) = e1*e347 + e12347;
F(1)(39) = e1*e367 + x1*e2367 + x3*e1267;
F(1)(40) = e1*e4567 + e14567;
F(2)(28) = e2*e145 + x1*e12345;
F(2)(29) = e2*e147 + x1*e12347;
F(2)(30) = e2*e156 + x1*e1256;
F(2)(31) = e2*e167 + x1*e1267;
F(2)(37) = e2*e3456 + x2*e23456;
F(2)(39) = e2*e367 + x2*e2367;
F(2)(40) = e2*e4567 + x4*e2367 + x6*e23456 + x1*e34567;
F(3)(28) = e3*e145 + x3*e12345;
F(3)(29) = e3*e147 + x3*e12347;
F(3)(30) = e3*e156 + x1*e23456 + x3*e1256;
F(3)(31) = e3*e167 + x1*e2367 + x3*e1267;
F(3)(35) = e3*e256 + x2*e23456;
F(3)(36) = e3*e267 + x2*e2367;
F(3)(40) = e3*e4567 + x3*e34567;
F(4)(25) = e4*e125 + x4*e12345;
F(4)(26) = e4*e126 + x6*e12345 + x3*e1256;
F(4)(27) = e4*e127 + e12347;
F(4)(31) = e4*e167 + e14567;
F(4)(33) = e4*e236 + x3*e23456;
F(4)(36) = e4*e267 + x1*e34567 + x4*e2367 + x6*e23456;
F(4)(39) = e4*e367 + x3*e34567;
F(7)(37) = e7*e3456 + x6*e34567;
F(7)(33) = e7*e236 + x6*e2367;
F(7)(26) = e7*e126 + x6*e1267;
F(7)(32) = e7*e2345 + x6*e23456 + x1*e34567 + x4*e2367;
F(7)(28) = e7*e145 + e14567;
F(7)(25) = e7*e125 + x6*e1256 + x4*e1267;
F(7)(24) = e7*e1234 + e12347;
F(6)(38) = e6*e347 + x6*e34567;
F(6)(29) = e6*e147 + x6*e14567;
F(6)(34) = e6*e237 + x6*e2367;
F(6)(27) = e6*e127 + x6*e1267;
F(6)(32) = e6*e2345 + x5*e23456;
F(6)(25) = e6*e125 + x5*e1256;
F(6)(24) = e6*e1234 + x3*e1256 + x1*e23456 + x6*e12345;
F(5)(29) = e5*e147 + x4*e14567;
F(5)(34) = e5*e237 + x6*e23456 + x4*e2367;
F(5)(27) = e5*e127 + x6*e1256 + x4*e1267;
F(5)(33) = e5*e236 + x5*e23456;
F(5)(26) = e5*e126 + x5*e1256;
F(5)(38) = e5*e347 + x4*e34567;
F(5)(24) = e5*e1234 + x4*e12345;

F(1)(48) = e1*e34567 + e1234567;
F(7)(41) = e7*e12345 + e1234567;
F(2)(45) = e2*e14567 + x1*e1234567;
F(6)(42) = e6*e12347 + x6*e1234567;
F(4)(44) = e4*e1267 + e1234567;
F(5)(42) = e5*e12347 + x4*e1234567;
F(3)(45) = e3*e14567 + x3*e1234567;



for (i=1; i<=N; i++) {for (j=i+1; j<=N; j++) {poly F(j)(i) = F(i)(j);};};



ideal I; for (i=1; i<=N; i++) {for (j=i; j<=N; j++) {I = I + F(i)(j);};};



for (i=1; i<=7; i++)
    {for (j=1; j<=N; j++) 
         {for (k=1; k<=7; k++) 
              {poly S(i)(j)(k) = reduce(E(i)*F(j)(k) + E(k)*F(i)(j), I);
              };
         };
    };



for (i=1; i<=7; i++)
    {for (j=1; j<=N; j++) 
         {for (k=1; k<=7; k++) 
              {if (S(i)(j)(k) != 0)
                  {(i,j,k,E(i),E(j),E(k),S(i)(j)(k));
                  };
              };
         };
    };




for (i=1; i<=N; i++) {for (j=i; j<=N; j++) {for (k=1; k<=poly S(i)(j)(k) = E[i]*F(j)(k) + E[k]*F(i)(j);};};




poly f(1)(1234) = e1*e1234;
poly f(1)(125) = e1*e125;
poly f(1)(126) = e1*e126;
poly f(1)(127) = e1*e127;
poly f(1)(145) = e1*e145;
poly f(1)(147) = e1*e147;
poly f(1)(156) = e1*e156;
poly f(1)(167) = e1*e167;
poly f(1)(2345) = e1*e2345 + x1*e12345;
poly f(1)(236) = e1*e236;
poly f(1)(237) = e1*e237;
poly f(1)(256) = e1*e256 + x1*e1256;
poly f(1)(267) = e1*e267 + x1*e1267;
poly f(1)(3456) = e1*e3456 + x1*e23456 + x6*e12345 + x3*e1256;
poly f(1)(347) = e1*e347 + e12347;
poly f(1)(367) = e1*e367 + x1*e2367 + x3*e1267;
poly f(1)(4567) = e1*e4567 + e14567;





poly f(1)(2) = e1*e2 + x1*e12;
poly f(1)(3) = e1*e3 + x3*e12 + x1*e23;
poly f(1)(4) = e1*e4 + e14;
poly f(1)(5) = e1*e5 + e15;
poly f(1)(6) = e1*e6 + e16;
poly f(1)(7) = e1*e7 + e17;
poly f(2)(3) = e2*e3 + x2*e23;
poly f(2)(4) = e2*e4 + x4*e23 + x1*e34;
poly f(2)(5) = e2*e5 + e25;
poly f(2)(6) = e2*e6 + e26;
poly f(2)(7) = e2*e7 + e27;
poly f(3)(4) = e3*e4 + x3*e34;  
poly f(3)(5) = e3*e5 + x5*e34 + x2*e45;  
poly f(3)(6) = e3*e6 + e36;
poly f(3)(7) = e3*e7 + e37;
poly f(4)(5) = e4*e5 + x4*e45;  
poly f(4)(6) = e4*e6 + x6*e45 + x3*e56;
poly f(4)(7) = e4*e7 + e47;
poly f(5)(6) = e5*e6 + x5*e56;
poly f(5)(7) = e5*e7 + x6*e56 + x4*e67;
poly f(6)(7) = e6*e7 + x6*e67;




poly f(1)(12) = e1*e12;
poly f(1)(14) = e1*e14;
poly f(1)(15) = e1*e15;
poly f(1)(16) = e1*e16;
poly f(1)(17) = e1*e17;
poly f(1)(23) = e1*e23;  
poly f(1)(25) = e1*e25 + x1*e125;
poly f(1)(26) = e1*e26 + x1*e126;
poly f(1)(27) = e1*e27 + x1*e127;
poly f(1)(34) = e1*e34 + e1234;
poly f(1)(36) = e1*e36 + x3*e126 + x1*e236;
poly f(1)(37) = e1*e37 + x3*e127 + x1*e237;
poly f(1)(45) = e1*e45 + e145;
poly f(1)(47) = e1*e47 + e147;
poly f(1)(56) = e1*e56 + e156;
poly f(1)(67) = e1*e67 + e167;
poly f(2)(12) = e2*e12;
poly f(2)(14) = e2*e14 + x1*e1234;
poly f(2)(15) = e2*e15 + x1*e125;
poly f(2)(16) = e2*e16 + x1*e126;
poly f(2)(17) = e2*e17 + x1*e127;
poly f(2)(23) = e2*e23;
poly f(2)(25) = e2*e25;
poly f(2)(26) = e2*e26;
poly f(2)(27) = e2*e27;
poly f(2)(34) = e2*e34;
poly f(2)(36) = e2*e36 + x2*e236;
poly f(2)(37) = e2*e37 + x2*e237;
poly f(2)(45) = e2*e45 + e2345;
poly f(2)(47) = e2*e47 + x4*e237 + x1*e347;
poly f(2)(56) = e2*e56 + e256;
poly f(2)(67) = e2*e67 + e267;
poly f(3)(12) = e3*e12;
poly f(3)(14) = e3*e14 + x3*e1234;
poly f(3)(15) = e3*e15 + x3*e125 + x1*e2345;
poly f(3)(16) = e3*e16 + x3*e126 + x1*e236;
poly f(3)(17) = e3*e17 + x3*e127 + x1*e237;
poly f(3)(23) = e3*e23;
poly f(3)(25) = e3*e25 + x2*e2345;
poly f(3)(26) = e3*e26 + x2*e236;
poly f(3)(27) = e3*e27 + x2*e237;
poly f(3)(34) = e3*e34;
poly f(3)(36) = e3*e36;
poly f(3)(37) = e3*e37;
poly f(3)(45) = e3*e45;
poly f(3)(47) = e3*e47 + x3*e347;
poly f(3)(56) = e3*e56 + e3456;
poly f(3)(67) = e3*e67 + e367;
poly f(4)(12) = e4*e12 + e1234;
poly f(4)(14) = e4*e14;
poly f(4)(15) = e4*e15 + x4*e145;
poly f(4)(16) = e4*e16 + x6*e145 + x3*e156;
poly f(4)(17) = e4*e17 + e147;
poly f(4)(23) = e4*e23;
poly f(4)(25) = e4*e25 + x4*e2345;
poly f(4)(26) = e4*e26 + x6*e2345 + x3*e256;
poly f(4)(27) = e4*e27 + x1*e347 + x4*e237;
poly f(4)(34) = e4*e34;
poly f(4)(36) = e4*e36 + x3*e3456;
poly f(4)(37) = e4*e37 + x3*e347;
poly f(4)(45) = e4*e45;
poly f(4)(47) = e4*e47;
poly f(4)(56) = e4*e56;
poly f(4)(67) = e4*e67 + e4567;
poly f(5)(12) = e5*e12 + e125;
poly f(5)(14) = e5*e14 + x4*e145;
poly f(5)(15) = e5*e15;
poly f(5)(16) = e5*e16 + x5*e156;
poly f(5)(17) = e5*e17 + x6*e156 + x4*e167;
poly f(5)(23) = e5*e23 + e2345;
poly f(5)(25) = e5*e25;
poly f(5)(26) = e5*e26 + x5*e256;
poly f(5)(27) = e5*e27 + x6*e256 + x4*e267;
poly f(5)(34) = e5*e34;
poly f(5)(36) = e5*e36 + x5*e3456;
poly f(5)(37) = e5*e37 + x2*e4567 + x5*e347;
poly f(5)(45) = e5*e45;
poly f(5)(47) = e5*e47 + x4*e4567;
poly f(5)(56) = e5*e56;
poly f(5)(67) = e5*e67;
poly f(6)(12) = e6*e12 + e126;
poly f(6)(14) = e6*e14 + x3*e156 + x6*e145;
poly f(6)(15) = e6*e15 + x5*e156;
poly f(6)(16) = e6*e16;
poly f(6)(17) = e6*e17 + x6*e167;
poly f(6)(23) = e6*e23 + e236;
poly f(6)(25) = e6*e25 + x5*e256;
poly f(6)(26) = e6*e26;
poly f(6)(27) = e6*e27 + x6*e267;
poly f(6)(34) = e6*e34 + e3456;
poly f(6)(36) = e6*e36;
poly f(6)(37) = e6*e37 + x6*e367;
poly f(6)(45) = e6*e45;
poly f(6)(47) = e6*e47 + x6*e4567;
poly f(6)(56) = e6*e56;
poly f(6)(67) = e6*e67;
poly f(7)(12) = e7*e12 + e127;
poly f(7)(14) = e7*e14 + e147;
poly f(7)(15) = e7*e15 + x6*e156 + x4*e167;
poly f(7)(16) = e7*e16 + x6*e167;
poly f(7)(17) = e7*e17;
poly f(7)(23) = e7*e23 + e237;
poly f(7)(25) = e7*e25 + x6*e256 + x4*e267;
poly f(7)(26) = e7*e26 + x6*e267;
poly f(7)(27) = e7*e27;
poly f(7)(34) = e7*e34 + e347;
poly f(7)(36) = e7*e36 + x6*e367;
poly f(7)(37) = e7*e37;
poly f(7)(45) = e7*e45 + e4567;
poly f(7)(47) = e7*e47;
poly f(7)(56) = e7*e56;
poly f(7)(67) = e7*e67;



poly f(1)(1234) = e1*e1234;
poly f(1)(125) = e1*e125;
poly f(1)(126) = e1*e126;
poly f(1)(127) = e1*e127;
poly f(1)(145) = e1*e145;
poly f(1)(147) = e1*e147;
poly f(1)(156) = e1*e156;
poly f(1)(167) = e1*e167;
poly f(1)(2345) = e1*e2345 + x1*e12345;
poly f(1)(236) = e1*e236;
poly f(1)(237) = e1*e237;
poly f(1)(256) = e1*e256 + x1*e1256;
poly f(1)(267) = e1*e267 + x1*e1267;
poly f(1)(3456) = e1*e3456 + x1*e23456 + x6*e12345 + x3*e1256;
poly f(1)(347) = e1*e347 + e12347;
poly f(1)(367) = e1*e367 + x1*e2367 + x3*e1267;
poly f(1)(4567) = e1*e4567 + e14567;
poly f(2)(1234) = e2*e1234;
poly f(2)(125) = e2*e125;
poly f(2)(126) = e2*e126;
poly f(2)(127) = e2*e127;
poly f(2)(145) = e2*e145;
poly f(2)(147) = e2*e147;
poly f(2)(156) = e2*e156;
poly f(2)(167) = e2*e167;
poly f(2)(2345) = e2*e2345 + x1*e12345;
poly f(2)(236) = e2*e236;
poly f(2)(237) = e2*e237;
poly f(2)(256) = e2*e256 + x1*e1256;
poly f(2)(267) = e2*e267 + x1*e1267;
poly f(2)(3456) = e2*e3456 + x1*e23456 + x6*e12345 + x3*e1256;
poly f(2)(347) = e2*e347 + e12347;
poly f(2)(367) = e2*e367 + x1*e2367 + x3*e1267;
poly f(2)(4567) = e2*e4567 + e14567;


poly f(2)(2345) = e2*e2345;
poly f(2)(3456) = e2*e3456 + x2*e23456;
poly f(2)(347) = e2*e347;
poly f(2)(367) = e2*e367 + x2*e2367;
poly f(2)(4567) = e2*e4567 + x6*e23456 + x4*e2367 + x1*e34567;
poly f(3)(4567) = e3*e4567 + x3*e34567;
poly f(7)(2345) = e7*e2345 + x6*e23456 + x1*e34567 + x4*e2367;
poly f(7)(3456) = e7*e3456 + x6*e34567;


poly f(1)(23456) = e1*e23456;
poly f(1)(34567) = e1*e34567 + e1234567;
poly f(7)(23456) = e7*e23456;

poly  f(1)(1234567) = e1*e1234567;

list E = (e1,e2,e3,e4,e5,e6,e7,
e12,e14,e15,e16,e17,e23,e25,e26,e27,e34,e36,e37,e45,e47,e56,e67,
e1234,e125,e126,e127,e145,e147,e156,e167,e2345,e236,e237,e256,e267,e3456,e347,e367,e4567,
e12345,e12347,e1256,e1267,e14567,e23456,e2367,e34567,
e1234567); 

ideal I; for (i=1; i<=N; i++) {I = I + E[i]*E[i];}



for (i=1; i<=N; i++) {for (j=i; j<=N; j++) {poly F(i)(j) = E[i]*E[j];};};





for (i=1; i<=N; i++){
    for (j=i; j<=N; j++){
        if (isHomogeneous(F(i)(j)) == 0){
           F(i)(j);

;};};

F(5)(2) + "is not homogeneous";


I = I +  f(1)(2),f(1)(3),f(1)(4),f(1)(5),f(1)(6),f(1)(7),f(2)(3),f(2)(4),f(2)(5),f(2)(6),f(2)(7),
f(3)(4),f(3)(5),f(3)(6),f(3)(7),f(4)(5),f(4)(6),f(4)(7),f(5)(6),f(5)(7),f(6)(7),
f(1)(12),f(1)(14),f(1)(15),f(1)(16),f(1)(17),f(1)(23),f(1)(25),f(1)(26),f(1)(27),f(1)(34),f(1)(36),f(1)(37),f(1)(45),f(1)(47),f(1)(56),f(1)(67),
f(2)(12),f(2)(14),f(2)(15),f(2)(16),f(2)(17),f(2)(23),f(2)(25),f(2)(26),f(2)(27),f(2)(34),f(2)(36),f(2)(37),f(2)(45),f(2)(47),f(2)(56),f(2)(67),
f(3)(12),f(3)(14),f(3)(15),f(3)(16),f(3)(17),f(3)(23),f(3)(25),f(3)(26),f(3)(27),f(3)(34),f(3)(36),f(3)(37),f(3)(45),f(3)(47),f(3)(56),f(3)(67),
f(4)(12),f(4)(14),f(4)(15),f(4)(16),f(4)(17),f(4)(23),f(4)(25),f(4)(26),f(4)(27),f(4)(34),f(4)(36),f(4)(37),f(4)(45),f(4)(47),f(4)(56),f(4)(67),
f(5)(12),f(5)(14),f(5)(15),f(5)(16),f(5)(17),f(5)(23),f(5)(25),f(5)(26),f(5)(27),f(5)(34),f(5)(36),f(5)(37),f(5)(45),f(5)(47),f(5)(56),f(5)(67),
f(6)(12),f(6)(14),f(6)(15),f(6)(16),f(6)(17),f(6)(23),f(6)(25),f(6)(26),f(6)(27),f(6)(34),f(6)(36),f(6)(37),f(6)(45),f(6)(47),f(6)(56),f(6)(67),
f(7)(12),f(7)(14),f(7)(15),f(7)(16),f(7)(17),f(7)(23),f(7)(25),f(7)(26),f(7)(27),f(7)(34),f(7)(36),f(7)(37),f(7)(45),f(7)(47),f(7)(56),f(7)(67),

f(1)(1234),f(1)(125),f(1)(126),f(1)(127),f(1)(145),f(1)(147),f(1)(156),f(1)(167),f(1)(2345),f(1)(236),f(1)(237),f(1)(256),f(1)(267),f(1)(3456),f(1)(347),f(1)(367),f(1)(4567),


f(2)(2345),f(2)(3456),f(2)(347),f(2)(367),f(2)(4567),f(3)(4567),f(7)(2345),f(7)(3456),f(1)(23456),f(1)(34567),f(1)(1234567);


I = std(I);


poly f(2)(1234) = e2*e1234;
poly f(2)(125) = e2*e125;
poly f(2)(126) = e2*e126;
poly f(2)(127) = e2*e127;
poly f(2)(145) = e2*e145;
poly f(2)(147) = e2*e147;
poly f(2)(156) = e2*e156;
poly f(2)(167) = e2*e167;
poly f(2)(2345) = e2*e2345 + x1*e12345;
poly f(2)(236) = e2*e236;
poly f(2)(237) = e2*e237;
poly f(2)(256) = e2*e256 + x1*e1256;
poly f(2)(267) = e2*e267 + x1*e1267;
poly f(2)(3456) = e2*e3456 + x1*e23456 + x6*e12345 + x3*e1256;
poly f(2)(347) = e2*e347 + e12347;
poly f(2)(367) = e2*e367 + x1*e2367 + x3*e1267;
poly f(2)(4567) = e2*e4567 + e14567;





resolution re=mres(I,1);





for (i=1; i<=N; i++) { reduce(e4 *L[i],I);};




for (i=1; i<=N; i++) { for (j=i+1; j<=N; j++) {reduce(E[i]*E[j],I);};};



for (i=1; i<=10000; i++) {for (j=1; j<=10000; j++) {poly f(i)(j);};};



ring B=2,(x,y,z,u,v,w,e1,e2,e3,e4,e5,e6,e7,
e12,e14,e15,e16,e17,e23,e25,e26,e27,e34,e36,e37,e45,e47,e56,e67,
e1234,e2345,e3456,e4567,e125,e126,e127,e145,e147,e156,e167,e236,e237,e256,e267,e347,e367,
e12345,e1256,e23456,e1267,e2367,e34567,e12347,e14567,
e1234567),Dp;

ideal J = fetch(A,I);
std(J);




for (i=1; i<=N; i++) {for (j=1; j<=N; j++) {poly F(i)(j) = E[i]*E[j];};};





map D = A, x1*x1, x1*x2, x2*x3, x3*x4, x4*x5, x5*x6, x6*x6, 
x2*e1 + x1*e2, x3*x4*e1 + x1*x1*e4, x4*x5*e1 + x1*x1*e5, x5*x6*e1 + x1*x1*e6, x6*x6*e1 + x1*x1*e7, 
x3*e2 + x1*e3, x4*x5*e2 + x1*x2*e5,
x5*x6*e2 + x1*x2*e6, x6*x6*e2 + x1*x2*e7, x4*e3 + x2*e4, x5*x6*e3 + x2*x3*e6, x6*x6*e3 + x2*x3*e7, x5*e4 + x3*e5, 
x6*x6*e4 + x3*x4*e7, x6*e5 + x4*e6, x6*e6 + x5*e7, x3*x4*e12 + x1*x4*e23 + x1*x1*e34 + x2*e14, x4*x5*e12 + x1*e25 + x2*e15,
x5*x6*e12 + x2*e16 + x1*e26, x6*x6*e12 + x2*e17 + x1*e27, x5*e14 + x3*e15 + x1*x1*e45, x6*x6*e14 + x3*x4*e17 + x1*x1*e47,
x6*e15 + x4*e16 + x1*x1*e56, x6*e16 + x5*e17 + x1*x1*e67, x4*x5*e23 + x1*x5*e34 + x1*x2*e45 + x3*e25, x5*x6*e23 + x3*e26 + x1*e36,
x6*x6*e23 + x3*e27 + x1*e37, x6*e25 + x4*e26 + x1*x2*e56, x6*e26 + x5*e27 + x1*x2*e67, x5*x6*e34 + x2*x6*e45 + x2*x3*e56 + x4*e36,
x6*x6*e34 + x4*e37 + x2*e47, x6*e36 + x5*e37 + x2*x3*e67, x6*x6*e45 + x3*x6*e56 + x3*x4*e67 + x5*e47,
x5*e1234 + x1*e2345 + x3*e125 + x2*e145, x6*x6*e1234 + x1*x4*e237 + x1*x1*e347 + x2*e147 + x3*x4*e127,
x6*e125 + x4*e126 + x2*e156 + x1*e256, x6*e126 + x5*e127 + x2*e167 + x1*e267,
x1*x1*e4567 + x6*x6*e145 + x3*x6*e156 + x3*x4*e167 + x5*e147, x6*e2345 + x1*e3456 + x4*e236 + x3*e256,
x6*e236 + x3*e267 + x5*e237 + x1*e367, x5*e347 + x6*e3456 + x2*e4567 + x4*e367, 
x6*x6*e12345 + x5*e12347 + x3*x6*e1256 + x3*x4*e1267 + x2*e14567 + x1*x6*e23456 + x1*x4*e2367 + x1*x1*e34567;


poly E1 = e1;
poly E2 = e2;
poly E3 = e3;
poly E4 = e4;
poly E5 = e5;
poly E6 = e6;
poly E7 = e7;
poly E12 = e12;
poly E14 = e14;
poly E15 = e15;
poly E16 = e16;
poly E17 = e17;
poly E23 = e23;
poly E25 = e25;
poly E26 = e26;
poly E27 = e27;
poly E34 = e34;
poly E36 = e36;
poly E37 = e37;
poly E45 = e45;
poly E56 = e56;
poly E67 = e67;
poly E1234 = e1234;
poly E125 = e125;
poly E126 = e126;
poly E127 = e127;
poly E145 = e145;
poly E147 = e147;
poly E156 = e156;
poly E167 = e167;
poly E2345 = e2345;
poly E236 = e236;
poly E237 = e237;
poly E256 = e256;
poly E267 = e267;
poly E3456 = e3456;
poly E347 = e347;
poly E367 = e367;
poly E4567 = e4567;
poly E12345 = e12345;
poly E12347 = e12347;
poly E1256 = e1256;
poly E1267 = e1267;
poly E14567 = e14567;
poly E23456 = e23456;
poly E2367 = e2367;
poly E34567 = e34567;
poly E1234567 = e1234567;









----------------------------------------------------------------------------------------------------------------

Multigrading Check

LIB "multigrading.lib";

ring A=2,(x1,x2,x3,x4,x5,x6,e1,e2,e3,e4,e5,e6,e7,
e12,e14,e15,e16,e17,e23,e25,e26,e27,e34,e36,e37,e45,e47,e56,e67,
e1234,e125,e126,e127,e145,e147,e156,e167,e2345,e236,e237,e256,e267,e3456,e347,e367,e4567,
e12345,e12347,e1256,e1267,e14567,e23456,e2367,e34567,
e1234567),dp;

intmat M[6][55] =
 
1,0,0,0,0,0,2,1,0,0,0,0,0,2,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,1,1,1,1,1,0,0,0,0,2,2,2,2,2,1,1,0,2,
0,1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,
0,0,1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,
0,0,0,1,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,1,0,0,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,1,0,1,1,0,1,1,1,1,0,1,1,0,1,1,
0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,1,1,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,
0,0,0,0,0,1,0,0,0,0,0,1,2,0,0,0,1,2,0,0,1,2,0,1,2,0,2,1,2,0,0,1,2,0,2,1,2,0,1,2,1,2,1,2,2,2,0,2,1,2,2,1,2,2,2;

;

intmat L[6][1] = 0,0,0,0,0,0;

setBaseMultigrading(M,L);

poly f(1)(2) = e1*e2 + x1*e12;
poly f(1)(3) = e1*e3 + x3*e12 + x1*e23;
poly f(1)(4) = e1*e4 + e14;
poly f(1)(5) = e1*e5 + e15;
poly f(1)(6) = e1*e6 + e16;
poly f(1)(7) = e1*e7 + e17;
poly f(2)(3) = e2*e3 + x2*e23;
poly f(2)(4) = e2*e4 + x4*e23 + x1*e34;
poly f(2)(5) = e2*e5 + e25;
poly f(2)(6) = e2*e6 + e26;
poly f(2)(7) = e2*e7 + e27;
poly f(3)(4) = e3*e4 + x3*e34;  
poly f(3)(5) = e3*e5 + x5*e34 + x2*e45;  
poly f(3)(6) = e3*e6 + e36;
poly f(3)(7) = e3*e7 + e37;
poly f(4)(5) = e4*e5 + x4*e45;  
poly f(4)(6) = e4*e6 + x6*e45 + x3*e56;
poly f(4)(7) = e4*e7 + e47;
poly f(5)(6) = e5*e6 + x5*e56;
poly f(5)(7) = e5*e7 + x6*e56 + x4*e67;
poly f(6)(7) = e6*e7 + x6*e67;

poly f(1)(23) = e1*e23;  
poly f(1)(24) = e1*e25 + x1*e125;
poly f(1)(26) = e1*e26 + x1*e126;
poly f(1)(27) = e1*e27 + x1*e127;
poly f(1)(34) = e1*e34 + e1234;
poly f(1)(36) = e1*e36 + x3*e126 + x1*e236;
poly f(1)(37) = e1*e37 + x3*e127 + x1*e237;
poly f(1)(45) = e1*e45 + e145;
poly f(1)(47) = e1*e47 + e147;
poly f(1)(56) = e1*e56 + e156;
poly f(1)(67) = e1*e67 + e167;
poly f(2)(14) = e2*e14 + x1*e1234;
poly f(2)(15) = e2*e15 + x1*e125;
poly f(2)(16) = e2*e16 + x1*e126;
poly f(2)(17) = e2*e17 + x1*e127;
poly f(2)(34) = e2*e34;
poly f(2)(36) = e2*e36 + x2*e236;
poly f(2)(37) = e2*e37 + x2*e237;
poly f(2)(45) = e2*e45;
poly f(2)(47) = e2*e47 + x4*e237 + x1*e347;
poly f(2)(56) = e2*e56 + e256;
poly f(2)(67) = e2*e67 + e267;
poly f(3)(14) = e3*e14 + x3*e1234;
poly f(3)(15) = e3*e15 + x3*e125 + x1*e2345;
poly f(3)(25) = e3*e25 + x2*e2345;
poly f(3)(45) = e3*e45;
poly f(3)(47) = e3*e47 + x3*e347;
poly f(3)(56) = e3*e56 + e3456;
poly f(3)(67) = e3*e67 + e367;
poly f(4)(56) = e4*e56;
poly f(4)(67) = e4*e67 + e4567;
poly f(5)(67) = e5*e67;
poly f(7)(36) = e7*e36 + x6*e367;
poly f(7)(45) = e7*e45 + e4567;

poly f(1)(2345) = e1*e2345 + x1*e12345;
poly f(1)(236) = e1*e236;
poly f(1)(237) = e1*e237;
poly f(1)(256) = e1*e256 + x1*e1256;
poly f(1)(267) = e1*e267 + x1*e1267;
poly f(1)(3456) = e1*e3456 + x1*e23456 + x6*e12345 + x3*e1256;
poly f(1)(347) = e1*e347 + e12347;
poly f(1)(367) = e1*e367 + x1*e2367 + x3*e1267;
poly f(1)(4567) = e1*e4567 + e14567;
poly f(2)(2345) = e2*e2345;
poly f(2)(3456) = e2*e3456 + x2*e23456;
poly f(2)(347) = e2*e347;
poly f(2)(367) = e2*e367 + x2*e2367;
poly f(2)(4567) = e2*e4567 + x6*e23456 + x4*e2367 + x1*e34567;
poly f(3)(4567) = e3*e4567 + x3*e34567;
poly f(7)(2345) = e7*e2345 + x6*e23456 + x1*e34567 + x4*e2367;
poly f(7)(3456) = e7*e3456 + x6*e34567;

poly f(1)(23456) = e1*e23456;
poly f(1)(34567) = e1*e34567 + e1234567;
poly f(7)(23456) = e7*e23456;

poly f(1)(1234567) = e1*e1234567;



list L = (e1,e2,e3,e4,e5,e6,e7,
e12,e14,e15,e16,e17,e23,e25,e26,e27,e34,e36,e37,e45,e47,e56,e67,
e1234,e2345,e3456,e4567,e125,e126,e127,e145,e147,e156,e167,e236,e237,e256,e267,e347,e367,
e12345,e1256,e23456,e1267,e2367,e34567,e12347,e14567,
e1234567); 

ideal I; for (i=1; i<=N; i++) {I = I + L[i]*L[i];}


I = I +  f(1)(2),f(1)(3),f(1)(4),f(1)(5),f(1)(6),f(1)(7),f(2)(3),f(2)(4),f(2)(5),f(2)(6),f(2)(7),
f(3)(4),f(3)(5),f(3)(6),f(3)(7),f(4)(5),f(4)(6),f(4)(7),f(5)(6),f(5)(7),f(6)(7),f(1)(23),f(1)(24),
f(1)(26),f(1)(27),f(1)(34),f(1)(36),f(1)(37),f(1)(45),f(1)(47),f(1)(56),f(1)(67),f(2)(14),f(2)(15),
f(2)(16),f(2)(17),f(2)(34),f(2)(36),f(2)(37),f(2)(45),f(2)(47),f(2)(56),f(2)(67),
f(3)(14),f(3)(15),f(3)(25),f(3)(45),f(3)(47),f(3)(56),f(3)(67),f(4)(56),f(4)(67),
f(5)(67),f(7)(36),f(7)(45),f(1)(2345),f(1)(236),f(1)(237),
f(1)(256),f(1)(267),f(1)(3456),f(1)(347),f(1)(367),f(1)(4567),f(2)(2345),f(2)(3456),
f(2)(347),f(2)(367),f(2)(4567),f(3)(4567),
f(7)(2345),f(7)(3456),f(1)(23456),f(1)(34567),f(1)(1234567);

isHomogeneous(I);


for (i=1; i<=N; i++) 
    {for (j=i; j<=N; j++)
         {if (isHomogeneous(F(i)(j)) == 0) 
             {(i,j,F(i)(j));
             };
         };
    };


YES!!!


-------------------------------------------------------------------------------------------------




Leibniz Law Check







map D = A, x1*x1, x1*x2, x2*x3, x3*x4, x4*x5, x5*x6, x6*x6, 
x2*e1 + x1*e2, x3*x4*e1 + x1*x1*e4, x5*x6*e1 + x1*x1*e5, x6*x6*e1 + x1*x1*e7, x3*e2 + x1*e3, x4*x5*e2 + x1*x1*e5,
x5*x6*e2 + x1*x2*e6, x6*x6*e2 + x1*x2*e7, x4*e3 + x2*e4, x5*x6*e3 + x2*x3*e6, x6*x6*e3 + x2*x3*e7, x5*e4 + x3*e5, 
x6*x6*e4 + x3*x4*e7, x6*e5 + x4*e6, x6*e6 + x5*e7, x3*x4*e12 + x1*x4*e23 + x1*x1*e34 + x2*e14, x4*x5*e12 + x1*e25 + x2*e15,
x5*x6*e12 + x2*e16 + x1*e26, x6*x6*e12 + x2*e17 + x1*e27, x5*e14 + x3*e15 + x1*x1*e45, x6*x6*e14 + x3*x4*e17 + x1*x1*e47,
x6*e15 + x4*e16 + x1*x1*e56, x6*e16 + x5*e17 + x1*x1*e67, x4*x5*e23 + x1*x5*e34 + x1*x2*e45 + x3*e25, x5*x6*e23 + x3*e26 + x1*e36,
x6*x6*e23 + x3*e27 + x1*e37, x6*e25 + x4*e26 + x1*x2*e56, x6*e26 + x5*e27 + x1*x2*e67, x5*x6*e34 + x2*x6*e45 + x2*x3*e56 + x4*e36,
x6*x6*e34 + x4*e37 + x2*e47, x6*e36 + x5*e37 + x2*x3*e67, x6*x6*e45 + x3*x6*e56 + x3*x4*e67 + x5*e47,
x5*e1234 + x1*e2345 + x3*e125 + x2*e145, x6*x6*e1234 + x1*x4*e237 + x1*x1*e347 + x2*e147 + x3*x4*e127,
x6*e125 + x4*e126 + x2*e156 + x1*e256, x6*e126 + x5*e127 + x2*e167 + x1*e267,
x1*x1*e4567 + x6*x6*e145 + x3*x6*e156 + x3*x4*e167 + x5*e147, x6*e2345 + x1*e3456 + x4*e236 + x3*e256,
x6*e236 + x3*e267 + x5*e237 + x1*e367, x5*e347 + x6*e3456 + x2*e4567 + x4*e367, 
x6*x6*e12345 + x5*e12347 + x3*x6*e1256 + x3*x4*e1267 + x2*e14567 + x1*x6*e23456 + x1*x4*e2367 + x1*x1*e34567;


poly E1 = e1;
poly E2 = e2;
poly E3 = e3;
poly E4 = e4;
poly E5 = e5;
poly E6 = e6;
poly E7 = e7;
poly E12 = e12;
poly E14 = e14;
poly E15 = e15;
poly E16 = e16;
poly E17 = e17;
poly E23 = e23;
poly E25 = e25;
poly E26 = e26;
poly E27 = e27;
poly E34 = e34;
poly E36 = e36;
poly E37 = e37;
poly E45 = e45;
poly E56 = e56;
poly E67 = e67;
poly E1234 = e1234;
poly E125 = e125;
poly E126 = e126;
poly E127 = e127;
poly E145 = e145;
poly E147 = e147;
poly E156 = e156;
poly E167 = e167;
poly E2345 = e2345;
poly E236 = e236;
poly E237 = e237;
poly E256 = e256;
poly E267 = e267;
poly E3456 = e3456;
poly E347 = e347;
poly E367 = e367;
poly E4567 = e4567;
poly E12345 = e12345;
poly E12347 = e12347;
poly E1256 = e1256;
poly E1267 = e1267;
poly E14567 = e14567;
poly E23456 = e23456;
poly E2367 = e2367;
poly E34567 = e34567;
poly E1234567 = e1234567;
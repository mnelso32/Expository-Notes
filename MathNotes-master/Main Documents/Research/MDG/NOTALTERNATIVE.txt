
characteristic 2



intvec v= 1:6, 2:15, 3:18, 4:10, 5:2;
ring A=2,(e1,e2,e3,e4,e5,e6,
e12,e13,e14,e15,e16,e23,e24,e25,e26,e34,e35,e36,e45,e46,e56,
e123,e124,e125,e126,e134,e135,e136,e145,e146,e234,e235,e236,e245,e246,e345,e346,e356,e456,
e1234,e1235,e1236,e1245,e1246,e1345,e1346,e2345,e2346,e3456,
e12345,e12346),Wp(v);

// missing e256, e156, e1256, ...

// vertex * vertex

poly f(1)(2) = e1*e2-e12; 
poly f(1)(3) = e1*e3-e13;
poly f(1)(4) = e1*e4-e14; 
poly f(1)(5) = e1*e5-e15;
poly f(1)(6) = e1*e6-e16; 
poly f(2)(3) = e2*e3-e23; 
poly f(2)(4) = e2*e4-e24;
poly f(2)(5) = e2*e5-e25; 
poly f(2)(6) = e2*e6-e26;
poly f(3)(4) = e3*e4-e34;
poly f(3)(5) = e3*e5-e35;
poly f(3)(6) = e3*e6-e36;
poly f(4)(5) = e4*e5-e45;
poly f(4)(6) = e4*e6-e46;
poly f(5)(6) = e5*e6-e56;

// vertex * edge

poly f(1)(23) = e1*e23-e123;
poly f(1)(24) = e1*e24-e124; 
poly f(1)(25) = e1*e25-e125;
poly f(1)(26) = e1*e26-e126;
poly f(1)(34) = e1*e34-e134;
poly f(1)(35) = e1*e35-e135;
poly f(1)(36) = e1*e36-e136;
poly f(1)(45) = e1*e45-e145; 
poly f(1)(46) = e1*e46-e146;
poly f(1)(56) = e1*e56-e356+e135-e136;
poly f(2)(34) = e2*e34-e234;
poly f(2)(35) = e2*e35-e235; 
poly f(2)(36) = e2*e36-e236;
poly f(2)(45) = e2*e45-e245;
poly f(2)(46) = e2*e46-e246;
poly f(2)(56) = e2*e56-e456+e245-e246;
poly f(3)(45) = e3*e45-e345;
poly f(3)(46) = e3*e46-e346;
poly f(3)(56) = e3*e56-e356;
poly f(4)(56) = e4*e56-e456;

// vertex * face

poly f(1)(234) = e1*e234-e1234;
poly f(1)(235) = e1*e235-e1235;
poly f(1)(236) = e1*e236-e1236;
poly f(1)(245) = e1*e245-e1245;
poly f(1)(246) = e1*e246-e1246;
poly f(1)(346) = e1*e346-e1346;
poly f(2)(345) = e2*e345-e2345;
poly f(2)(346) = e2*e346-e2346;
poly f(3)(456) = e3*e456-e3456;
poly f(1)(456) = e1*e456+e1235+e1236+e1245+e1246+e2345+e2346+e3456;
poly f(2)(356) = e2*e356+e1235+e1236+e1245+e1246+e1346+e1345+e3456;



// initiate ideal b and adjoin squares

int i;
ideal b;
list odd = (e1,e2,e3,e4,e5,e6,e123,e124,e125,e126,e134,e135,e136,e145,e146,e234,e235,e236,e245,e246,e345,e346,e356,e456,e12345,e12346); 
for (i=1; i<=26; i++) {b = b + odd[i]*odd[i] ;}

b = b + f(1)(2),f(1)(3),f(1)(4),f(1)(5),f(1)(6),f(2)(3),f(2)(4),f(2)(5),f(2)(6),f(3)(4),f(3)(5),f(3)(6),f(4)(5),f(4)(6),f(5)(6),
f(1)(23),f(1)(24),f(1)(25),f(1)(26),f(1)(34),f(1)(35),f(1)(36),f(1)(45),f(1)(46),f(1)(56),
f(2)(34),f(2)(35),f(2)(36),f(2)(45),f(2)(46),f(2)(56),f(3)(45),f(3)(46),f(3)(56),f(4)(56),
f(1)(456),f(2)(356),f(1)(234),f(1)(235),f(1)(236),f(1)(245),f(1)(246),f(1)(346),f(2)(345),f(2)(346),f(3)(456);














reduce(e2*f(1)(56)+e1*f(2)(56),b);

// d(e12356+e12456+e23456+e13456) = e1235+e1236+e1245+e1246+e1345+e1346+e2345+e2346 = [e1,e56,e2] = d(e12345+e12346)
// [e1,e456,e2]  = 0
// [e1,e356,e2]  = 0 
// [e1,e456,e3]  = e12345+e12346
// [e1,e356,e4]  = 0
// [e2,e356,e4]  = e12345+e12346

reduce(e1*e456*e2,b);


b=std(b);
b;



b=std(b);
b;



// d(e12356+e12456+e23456+e13456) = e1235+e1236+e1245+e1246+e1345+e1346+e2345+e2346 = [e1,e56,e2]
